<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moist</title>
  
  
  <link href="https://sdumoist.github.io/atom.xml" rel="self"/>
  
  <link href="https://sdumoist.github.io/"/>
  <updated>2024-03-26T09:28:31.996Z</updated>
  <id>https://sdumoist.github.io/</id>
  
  <author>
    <name>SDUMoist</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2642. 设计可以求最短路径的图类</title>
    <link href="https://sdumoist.github.io/2024/03/26/2642-%E8%AE%BE%E8%AE%A1%E5%8F%AF%E4%BB%A5%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E5%9B%BE%E7%B1%BB/"/>
    <id>https://sdumoist.github.io/2024/03/26/2642-%E8%AE%BE%E8%AE%A1%E5%8F%AF%E4%BB%A5%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%9A%84%E5%9B%BE%E7%B1%BB/</id>
    <published>2024-03-26T08:36:39.000Z</published>
    <updated>2024-03-26T09:28:31.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2642-设计可以求最短路径的图类"><a href="#2642-设计可以求最短路径的图类" class="headerlink" title="2642. 设计可以求最短路径的图类"></a>2642. 设计可以求最短路径的图类</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给你一个有 <code>n</code> 个节点的 <strong>有向带权</strong> 图，节点编号为 <code>0</code> 到 <code>n - 1</code> 。图中的初始边用数组 <code>edges</code> 表示，其中 <code>edges[i] = [fromi, toi, edgeCosti]</code> 表示从 <code>fromi</code> 到 <code>toi</code> 有一条代价为 <code>edgeCosti</code> 的边。</p><p>请你实现一个 <code>Graph</code> 类：</p><ul><li><code>Graph(int n, int[][] edges)</code> 初始化图有 <code>n</code> 个节点，并输入初始边。</li><li><code>addEdge(int[] edge)</code> 向边集中添加一条边，其中 <code>edge = [from, to, edgeCost]</code> 。数据保证添加这条边之前对应的两个节点之间没有有向边。</li><li><code>int shortestPath(int node1, int node2)</code> 返回从节点 <code>node1</code> 到 <code>node2</code> 的路径 <strong>最小</strong> 代价。如果路径不存在，返回 <code>-1</code> 。一条路径的代价是路径中所有边代价之和。</li></ul><p><strong>示例 1：</strong></p><p><img src="/./assets/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/graph3drawio-2.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;Graph&quot;, &quot;shortestPath&quot;, &quot;shortestPath&quot;, &quot;addEdge&quot;, &quot;shortestPath&quot;]</span><br><span class="line">[[4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]], [3, 2], [0, 3], [[1, 3, 4]], [0, 3]]</span><br><span class="line">输出：</span><br><span class="line">[null, 6, -1, null, 6]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">Graph g = new Graph(4, [[0, 2, 5], [0, 1, 2], [1, 2, 1], [3, 0, 3]]);</span><br><span class="line">g.shortestPath(3, 2); // 返回 6 。从 3 到 2 的最短路径如第一幅图所示：3 -&gt; 0 -&gt; 1 -&gt; 2 ，总代价为 3 + 2 + 1 = 6 。</span><br><span class="line">g.shortestPath(0, 3); // 返回 -1 。没有从 0 到 3 的路径。</span><br><span class="line">g.addEdge([1, 3, 4]); // 添加一条节点 1 到节点 3 的边，得到第二幅图。</span><br><span class="line">g.shortestPath(0, 3); // 返回 6 。从 0 到 3 的最短路径为 0 -&gt; 1 -&gt; 3 ，总代价为 2 + 4 = 6 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 100</code></li><li><code>0 &lt;= edges.length &lt;= n * (n - 1)</code></li><li><code>edges[i].length == edge.length == 3</code></li><li><code>0 &lt;= fromi, toi, from, to, node1, node2 &lt;= n - 1</code></li><li><code>1 &lt;= edgeCosti, edgeCost &lt;= 106</code></li><li>图中任何时候都不会有重边和自环。</li><li>调用 <code>addEdge</code> 至多 <code>100</code> 次。</li><li>调用 <code>shortestPath</code> 至多 <code>100</code> 次。</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目要求实现 Graph 类，一共有三个类方法，一个构造方法，一个添加边的方法，一个求最短路径的方法。前两个属于简单问题，没有什么难度，重点在于求有向加权图的最短路径的那一个方法。</p><p>之前数据结构课设中，我选择的课设题目便是解决有向加权图的最短路径的求取方法，所以刚好用上了。</p><p><a href="https://github.com/sdumoist/DataStruct/tree/main/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1">https://github.com/sdumoist/DataStruct/tree/main/%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1</a></p><ul><li><p>Floyd算法</p><ul><li>算法思想：是一种基于动态规划的多源最短路算法。</li><li>优点：代码非常容易理解，而且很优美。是一种在具有正或负（但没有负环）加权图中找到最短路径的算法，容易理解，可以算出任意两个节点之间的最短距离，代码编写简单</li><li>缺点：时间复杂度比较高，不适合计算大量数据    时间复杂度:O(n^3)； </li><li>代码实现<ul><li><p><img src="/./assets/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/image-20240326165100929.png" alt="image-20240326165100929"></p></li><li><pre><code class="java">public void shortestEdges()&#123;        minEdges = edges;        for(int i = 0; i &lt; n; i++)            for(int j = 0; j &lt; n; j++)&#123;                if(minEdges[i][j] == 0) minEdges[i][j] = Integer.MAX_VALUE;                if(i == j) minEdges[i][j] = 0;            &#125;        for(int k = 0; k &lt; n; k++)            for(int i = 0; i &lt; n; i ++)                if(minEdges[i][k] != Integer.MAX_VALUE)                    for(int j = 0; j &lt; n; j++)                        if(minEdges[k][j] != Integer.MAX_VALUE &amp;&amp; minEdges[i][j] &gt; minEdges[i][k] + minEdges[k][j])                            minEdges[i][j] = minEdges[i][k] + minEdges[k][j];            &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line">    - </span><br><span class="line">- Bellman-Ford算法</span><br><span class="line">  - 算法思想：Bellman-Ford算法基于动态规划，反复利用已有的边来更新最短距离。核心思想是松弛。如果dist[u]和dist[v]满足dist[v]&lt;=dist[u]+map[u]\[v]，dist[v]就应该被更新为dist[u]+map[u]\[v]反复地利用上式对dist数组进行松弛，如果没有负权回路的话，应当会在n-1次松弛之后结束。</span><br><span class="line">  - 时间复杂度O(nm),空间复杂度O(m)</span><br><span class="line">  - 代码实现</span><br><span class="line">  </span><br><span class="line">    - ```java</span><br><span class="line">      public static void bellman_ford() &#123;</span><br><span class="line">              Arrays.fill(dist, INF);</span><br><span class="line">              dist[1] = 0;</span><br><span class="line">      </span><br><span class="line">              for (int i = 0; i &lt; k; i ++) &#123;</span><br><span class="line">                  //备份dist数组</span><br><span class="line">                  backup = Arrays.copyOf(dist, n + 1);</span><br><span class="line">                  for (int j = 0; j &lt; m; j ++) &#123;</span><br><span class="line">                      Node node = list[j];</span><br><span class="line">                      int x = node.x;</span><br><span class="line">                      int y = node.y;</span><br><span class="line">                      int z = node.z;</span><br><span class="line">                      dist[y] = Math.min(dist[y], backup[x] + z);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">      </span><br><span class="line">              if (dist[n] &gt; INF / 2) &#123;</span><br><span class="line">                  System.out.println(&quot;impossible&quot;);</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                  System.out.println(dist[n]);</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li></li></ul></li></ul></li><li><p>SPFA算法</p><ul><li><p>算法介绍</p><ul><li>最短路径快速算法（Shortest Path Faster Algorithm (SPFA)），一般认为是队列优化的Bellman-Ford 算法，是一个用于求解有向带权图单源最短路径的算法。</li><li>这一算法被认为在随机的稀疏图上表现出色，并且适用于带有负边权的图对于无向图，可通过将每个无向边视作两条有向边以采用 SPFA 算法。</li><li>SPFA的复杂度大约是O(kE),k是每个点的平均进队次数(一般的，k是一个常数，在稀疏图中小于2)</li><li>其优于狄杰斯特拉算法的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达 O(VE)。</li></ul></li><li><p>算法思想</p><ul><li>用数组dis记录每个结点的最短路径估计值，用邻接表或邻接矩阵来存储图G。</li><li>采取动态逼近法：设立一个先进先出的队列用来保存待优化的结点，优化时每次取出队首结点u，并且用u点当前的最短路径估计值对离开u点所指向的结点v进行松弛操作，如果v点的最短路径估计值有所调整，且v点不在当前的队列中，就将v点放入队尾。</li><li>这样不断从队列中取出结点来进行松弛操作，直至队列空为止</li></ul></li><li><p>代码实现</p><ul><li><pre><code class="java">public static int spfa() &#123;        Queue&lt;Integer&gt; queue = new LinkedList&lt;&gt;();        Arrays.fill(dist, INF);        dist[1] = 0;        queue.offer(1);        st[1] = true;        while (!queue.isEmpty()) &#123;            int t = queue.poll();            st[t] = false;//从队列中取出来之后该节点st被标记为false,代表之后该节点如果发生更新可再次入队            for (int i = h[t]; i != -1; i = ne[i]) &#123;                int j = e[i];                if (dist[j] &gt; dist[t] + w[i]) &#123;                    dist[j] = dist[t] + w[i];                    if (!st[j]) &#123;//当前已经加入队列的结点，无需再次加入队列，即便发生了更新也只用更新数值即可，重复添加降低效率                        queue.offer(j);                        st[j] = true;                    &#125;                &#125;            &#125;        &#125;        return dist[n];&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - </span><br><span class="line"></span><br><span class="line">- Dijkstra算法</span><br><span class="line"></span><br><span class="line">  - 采用的是贪心算法的策略，时间复杂度（N^2）</span><br><span class="line">  - 算法思想</span><br><span class="line">    - 将所有顶点分为两部分：已知最短路程的顶点集合P和未知最短路程的顶点集合Q。用vis[i]表示，如果vis[i]=1则表示这个顶点在集合P中，反之顶点在集合Q中。</span><br><span class="line">    - 设置源点s到自己的最短路径为0。其余按照实际情况进行设置。</span><br><span class="line">    - 在集合Q的所有定点中选择一个离源点s最近的顶点加入到集合P。并考察所有以点u为起点的边，对每一条边进行松弛操作。</span><br><span class="line">    - 重复第三步，如果集合Q为空，算法结束。最终dis数组中的值就是源点到所有顶点的最短路径。</span><br><span class="line"></span><br><span class="line">  - 代码实现</span><br><span class="line"></span><br><span class="line">    - ```java</span><br><span class="line">      /**</span><br><span class="line">           * Dijkstra最短路径。</span><br><span class="line">           * </span><br><span class="line">           * vs -- 起始顶点(start vertex) 即，统计图中&quot;顶点vs&quot;到其它各个顶点的最短路径。</span><br><span class="line">           */</span><br><span class="line">          public void dijkstra(int vs) &#123;</span><br><span class="line">              // flag[i]=true表示&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径已成功获取</span><br><span class="line">              boolean[] flag = new boolean[vertexes.length];</span><br><span class="line">              // U则是记录还未求出最短路径的顶点(以及该顶点到起点s的距离)，与 flag配合使用,flag[i] == true 表示U中i顶点已被移除</span><br><span class="line">              int[] U = new int[vertexes.length];</span><br><span class="line">              // 前驱顶点数组,即，prev[i]的值是&quot;顶点vs&quot;到&quot;顶点i&quot;的最短路径所经历的全部顶点中，位于&quot;顶点i&quot;之前的那个顶点。</span><br><span class="line">              int[] prev = new int[vertexes.length];</span><br><span class="line">              // S的作用是记录已求出最短路径的顶点</span><br><span class="line">              String[] S = new String[vertexes.length];</span><br><span class="line">       </span><br><span class="line">              // 步骤一：初始时，S中只有起点vs；U中是除vs之外的顶点，并且U中顶点的路径是&quot;起点vs到该顶点的路径&quot;。</span><br><span class="line">              for (int i = 0; i &lt; vertexes.length; i++) &#123;</span><br><span class="line">                  flag[i] = false; // 顶点i的最短路径还没获取到。</span><br><span class="line">                  U[i] = matrix[vs][i]; // 顶点i与顶点vs的初始距离为&quot;顶点vs&quot;到&quot;顶点i&quot;的权。也就是邻接矩阵vs行的数据。</span><br><span class="line">                  </span><br><span class="line">                  prev[i] = 0; //顶点i的前驱顶点为0</span><br><span class="line">              &#125;</span><br><span class="line">       </span><br><span class="line">              // 将vs从U中“移除”（U与flag配合使用）</span><br><span class="line">              flag[vs] = true;</span><br><span class="line">              U[vs] = 0;</span><br><span class="line">              // 将vs顶点加入S</span><br><span class="line">              S[0] = vertexes[vs];</span><br><span class="line">              // 步骤一结束</span><br><span class="line">              </span><br><span class="line">              //步骤四：重复步骤二三，直到遍历完所有顶点。</span><br><span class="line">              // 遍历vertexes.length-1次；每次找出一个顶点的最短路径。</span><br><span class="line">              int k = 0;</span><br><span class="line">              for (int i = 1; i &lt; vertexes.length; i++) &#123;</span><br><span class="line">                  // 步骤二：从U中找出路径最短的顶点，并将其加入到S中（如果vs顶点到x顶点还有更短的路径的话，那么</span><br><span class="line">                  // 必然会有一个y顶点到vs顶点的路径比前者更短且没有加入S中</span><br><span class="line">                  // 所以，U中路径最短顶点的路径就是该顶点的最短路径）</span><br><span class="line">                  // 即，在未获取最短路径的顶点中，找到离vs最近的顶点(k)。</span><br><span class="line">                  int min = MAX_WEIGHT;</span><br><span class="line">                  for (int j = 0; j &lt; vertexes.length; j++) &#123;</span><br><span class="line">                      if (flag[j] == false &amp;&amp; U[j] &lt; min) &#123;</span><br><span class="line">                          min = U[j];</span><br><span class="line">                          k = j;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  </span><br><span class="line">                  //将k放入S中</span><br><span class="line">                  S[i] = vertexes[k];</span><br><span class="line">                  </span><br><span class="line">                  //步骤二结束</span><br><span class="line">                  </span><br><span class="line">                  </span><br><span class="line">                  //步骤三：更新U中的顶点和顶点对应的路径</span><br><span class="line">                  //标记&quot;顶点k&quot;为已经获取到最短路径（更新U中的顶点，即将k顶点对应的flag标记为true）</span><br><span class="line">                  flag[k] = true;</span><br><span class="line">                  </span><br><span class="line">                  //修正当前最短路径和前驱顶点（更新U中剩余顶点对应的路径）</span><br><span class="line">                  //即，当已经&quot;顶点k的最短路径&quot;之后，更新&quot;未获取最短路径的顶点的最短路径和前驱顶点&quot;。</span><br><span class="line">                  for (int j = 0; j &lt; vertexes.length; j++) &#123;</span><br><span class="line">                      //以k顶点所在位置连线其他顶点，判断其他顶点经过最短路径顶点k到达vs顶点是否小于目前的最短路径，是，更新入U，不是，不做处理</span><br><span class="line">                      int tmp = (matrix[k][j] == MAX_WEIGHT ? MAX_WEIGHT : (min + matrix[k][j]));</span><br><span class="line">                      if (flag[j] == false &amp;&amp; (tmp &lt; U[j])) &#123;</span><br><span class="line">                          U[j] = tmp;</span><br><span class="line">                          //更新 j顶点的最短路径前驱顶点为k</span><br><span class="line">                          prev[j] = k;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  //步骤三结束</span><br><span class="line">              &#125;</span><br><span class="line">              //步骤四结束</span><br><span class="line">       </span><br><span class="line">              // 打印dijkstra最短路径的结果</span><br><span class="line">              System.out.println(&quot;起始顶点：&quot; + vertexes[vs]);</span><br><span class="line">              for (int i = 0; i &lt; vertexes.length; i++) &#123;</span><br><span class="line">                  System.out.print(&quot;最短路径（&quot; + vertexes[vs] + &quot;,&quot; + vertexes[i] + &quot;):&quot; + U[i] + &quot;  &quot;);</span><br><span class="line">                  </span><br><span class="line">                  List&lt;String&gt; path = new ArrayList&lt;&gt;();</span><br><span class="line">                  int j = i;</span><br><span class="line">                  while (true) &#123;</span><br><span class="line">                      path.add(vertexes[j]);</span><br><span class="line">                      </span><br><span class="line">                      if (j == 0)</span><br><span class="line">                          break;</span><br><span class="line">                      </span><br><span class="line">                      j = prev[j];</span><br><span class="line">                  &#125;</span><br><span class="line">                  </span><br><span class="line">                  for (int x = path.size()-1; x &gt;= 0; x--) &#123;</span><br><span class="line">                      if (x == 0) &#123;</span><br><span class="line">                          System.out.println(path.get(x));</span><br><span class="line">                      &#125; else &#123;</span><br><span class="line">                          System.out.print(path.get(x) + &quot;-&gt;&quot;);</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                  </span><br><span class="line">              &#125;</span><br><span class="line">              </span><br><span class="line">              System.out.println(&quot;顶点放入S中的顺序：&quot;);</span><br><span class="line">              for (int i = 0; i&lt; vertexes.length; i++) &#123;</span><br><span class="line">                  </span><br><span class="line">                  System.out.print(S[i]);</span><br><span class="line">                  </span><br><span class="line">                  if (i != vertexes.length-1) </span><br><span class="line">                      System.out.print(&quot;--&gt;&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li></li></ul></li></ul></li></ul><h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><ul><li>感觉如果是 <strong>查询最短路径</strong> 比较多的情况下，Floyd会优于Dijkstra</li><li>官方版本的 Floyd 优化了很多</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] edges;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] minEdges;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">change</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.n = n;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> edges.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            <span class="built_in">this</span>.edges[edges[i][<span class="number">0</span>]][edges[i][<span class="number">1</span>]] = edges[i][<span class="number">2</span>];</span><br><span class="line">        change = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span>[] edge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.edges[edge[<span class="number">0</span>]][edge[<span class="number">1</span>]] = edge[<span class="number">2</span>];</span><br><span class="line">        change = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestPath</span><span class="params">(<span class="type">int</span> node1, <span class="type">int</span> node2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(change == <span class="literal">true</span>) shortestEdges();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(minEdges[node1][node2] != Integer.MAX_VALUE) <span class="keyword">return</span> minEdges[node1][node2];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shortestEdges</span><span class="params">()</span>&#123;</span><br><span class="line">        minEdges = edges;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(minEdges[i][j] == <span class="number">0</span>) minEdges[i][j] = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">if</span>(i == j) minEdges[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">                <span class="keyword">if</span>(minEdges[i][k] != Integer.MAX_VALUE)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">                        <span class="keyword">if</span>(minEdges[k][j] != Integer.MAX_VALUE &amp;&amp; minEdges[i][j] &gt; minEdges[i][k] + minEdges[k][j])</span><br><span class="line">                            minEdges[i][j] = minEdges[i][k] + minEdges[k][j];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your Graph object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * Graph obj = new Graph(n, edges);</span></span><br><span class="line"><span class="comment"> * obj.addEdge(edge);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.shortestPath(node1,node2);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><strong>官方题解</strong></p><ul><li>Floyed 版</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] dist;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        dist = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Arrays.fill(dist[i], Integer.MAX_VALUE);</span><br><span class="line">            dist[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            dist[edge[<span class="number">0</span>]][edge[<span class="number">1</span>]] = edge[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (dist[i][k] != Integer.MAX_VALUE &amp;&amp; dist[k][j] != Integer.MAX_VALUE) &#123;</span><br><span class="line">                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span>[] edge)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> edge[<span class="number">0</span>], y = edge[<span class="number">1</span>], cost = edge[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">if</span> (cost &gt;= dist[x][y]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dist.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist[i][x] != Integer.MAX_VALUE &amp;&amp; dist[y][j] != Integer.MAX_VALUE) &#123;</span><br><span class="line">                    dist[i][j] = Math.min(dist[i][j], dist[i][x] + cost + dist[y][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestPath</span><span class="params">(<span class="type">int</span> node1, <span class="type">int</span> node2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> dist[node1][node2];</span><br><span class="line">        <span class="keyword">return</span> res == Integer.MAX_VALUE ? -<span class="number">1</span> : res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dijkstra版本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;<span class="type">int</span>[]&gt;[] graph;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] edges)</span> &#123;</span><br><span class="line">        graph = <span class="keyword">new</span> <span class="title class_">List</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            graph[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;<span class="type">int</span>[]&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> edge[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> edge[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> edge[<span class="number">2</span>];</span><br><span class="line">            graph[x].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;y, cost&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span>[] edge)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> edge[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> edge[<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> edge[<span class="number">2</span>];</span><br><span class="line">        graph[x].add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;y, cost&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestPath</span><span class="params">(<span class="type">int</span> node1, <span class="type">int</span> node2)</span> &#123;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;<span class="type">int</span>[]&gt;((a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span>[] dist = <span class="keyword">new</span> <span class="title class_">int</span>[graph.length];</span><br><span class="line">        Arrays.fill(dist, Integer.MAX_VALUE);</span><br><span class="line">        dist[node1] = <span class="number">0</span>;</span><br><span class="line">        pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, node1&#125;);</span><br><span class="line">        <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span>[] arr = pq.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> arr[<span class="number">0</span>], cur = arr[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (cur == node2) &#123;</span><br><span class="line">                <span class="keyword">return</span> cost;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] nextArr : graph[cur]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> nextArr[<span class="number">0</span>], ncost = nextArr[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (dist[next] &gt; cost + ncost) &#123;</span><br><span class="line">                    dist[next] = cost + ncost;</span><br><span class="line">                    pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;cost + ncost, next&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作者：力扣官方题解<br>链接：<a href="https://leetcode.cn/problems/design-graph-with-shortest-path-calculator/solutions/2701377/she-ji-ke-yi-qiu-zui-duan-lu-jing-de-tu-hj8e9/">https://leetcode.cn/problems/design-graph-with-shortest-path-calculator/solutions/2701377/she-ji-ke-yi-qiu-zui-duan-lu-jing-de-tu-hj8e9/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2642-设计可以求最短路径的图类&quot;&gt;&lt;a href=&quot;#2642-设计可以求最短路径的图类&quot; class=&quot;headerlink&quot; title=&quot;2642. 设计可以求最短路径的图类&quot;&gt;&lt;/a&gt;2642. 设计可以求最短路径的图类&lt;/h2&gt;&lt;h3 id=&quot;题目&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://sdumoist.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="每日一题" scheme="https://sdumoist.github.io/tags/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    <category term="困难" scheme="https://sdumoist.github.io/tags/%E5%9B%B0%E9%9A%BE/"/>
    
    <category term="有向图最短路径" scheme="https://sdumoist.github.io/tags/%E6%9C%89%E5%90%91%E5%9B%BE%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sdumoist.github.io/2024/03/25/hello-world/"/>
    <id>https://sdumoist.github.io/2024/03/25/hello-world/</id>
    <published>2024-03-25T10:50:58.339Z</published>
    <updated>2024-03-25T10:50:58.339Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
